{
  "version": 3,
  "sources": ["src/app/components/Components_Chart/Mega/megaChart.component.ts", "src/app/components/Components_Chart/Mega/megaChart.html", "src/app/pages/chartPage/chartPage.component.ts", "src/app/pages/chartPage/chartPage.html"],
  "sourcesContent": ["import { Component, computed } from '@angular/core';\nimport { Chart } from '../chart/chart.component';\nimport { IOperation } from '../../../models/dataTypes.model';\nimport { LocalStorage } from '../../../servises/LocalStorage.service';\nimport { Filter } from '../../../servises/filter.service';\nimport { Theme } from '../../../servises/theme.service';\n@Component({\n  selector: 'my-mega-chart',\n  templateUrl: './megaChart.html',\n  imports: [Chart],\n})\nexport class MegaChart {\n\n  constructor(public localStorage: LocalStorage, public filterService: Filter, public theme: Theme) {\n\n  }\n\n  public option = computed(() => {\n    const sortedIncome = [...this.incomeOperationsToMonth()].sort((a, b) => a.value - b.value);\n    const sortedExpens = [...this.expensOperationsToMonth()].sort((a, b) => a.value - b.value);\n\n    const incomeValues = sortedIncome.map(a => a.value);\n    const expensValues = sortedExpens.map(a => a.value);\n\n    const maxCount = Math.max(...incomeValues, ...expensValues);\n\n    const summIncome = incomeValues.reduce((sum, a) => sum + a, 0);\n    const summExpens = expensValues.reduce((sum, a) => sum + a, 0);\n\n    const incomeMonthsArr = sortedIncome.map(a => a.name);\n    const expensMonthsArr = sortedExpens.map(a => a.name);\n    const reverseIncomeValue = incomeValues.map(a => maxCount - a);\n    const reverseExpensValue = expensValues.map(a => maxCount - a);\n\n    const bestCategoryIncomeName = this.incomeOperationsToCategory()[0]?.name || '...';\n    const bestCategoryExpensName = this.expensOperationsToCategory()[0]?.name || '...';\n\n    return {\n      backgroundColor: 'transparent',\n      tooltip: {},\n      title: [\n        {\n          text: 'Доходы',\n          subtext: 'Суммарно: ' + summIncome,\n          left: '25%',\n          textAlign: 'center',\n        },\n        {\n          text: 'Категории доходов',\n          subtext: 'Больше всего доходов: ' + bestCategoryIncomeName,\n          left: '75%',\n          textAlign: 'center',\n        },\n        {\n          text: 'Расходы',\n          subtext: 'Суммарно: ' + summExpens,\n          left: '25%',\n          top: '50%',\n          textAlign: 'center',\n        },\n        {\n          text: 'Категории расходов',\n          subtext: 'Больше всего трат: ' + bestCategoryExpensName,\n          left: '75%',\n          top: '50%',\n          textAlign: 'center',\n        },\n      ],\n      grid: [\n        {\n          top: '8%',\n          width: '50%',\n          bottom: '50%',\n          left: 10,\n          containLabel: true,\n        },\n        {\n          top: '56%',\n          width: '50%',\n          bottom: 0,\n          left: 10,\n          containLabel: true,\n        },\n      ],\n      xAxis: [\n        {\n          type: 'value',\n          max: maxCount,\n          splitLine: {\n            show: false,\n          },\n        },\n        {\n          type: 'value',\n          max: maxCount,\n          gridIndex: 1,\n          splitLine: {\n            show: false,\n          },\n        },\n      ],\n      yAxis: [\n        {\n          type: 'category',\n          data: incomeMonthsArr,\n          axisLabel: {\n            interval: 0,\n            rotate: 30,\n          },\n          splitLine: {\n            show: false,\n          },\n        },\n        {\n          gridIndex: 1,\n          type: 'category',\n          data: expensMonthsArr,\n          axisLabel: {\n            interval: 0,\n            rotate: 30,\n          },\n          splitLine: {\n            show: false,\n          },\n        },\n      ],\n      series: [\n        {\n          type: 'bar',\n          stack: 'chart',\n          z: 3,\n          label: {\n            position: 'right',\n            show: true,\n          },\n          data: incomeValues,\n        },\n        {\n          type: 'bar',\n          stack: 'chart',\n          silent: true,\n          itemStyle: {\n            color: this.theme.darkTheme() ? '#353232ee' : '#eeee',\n          },\n          data: reverseIncomeValue,\n        },\n        {\n          type: 'bar',\n          stack: 'component',\n          xAxisIndex: 1,\n          yAxisIndex: 1,\n          z: 3,\n          label: {\n            position: 'right',\n            show: true,\n          },\n          data: expensValues,\n        },\n        {\n          type: 'bar',\n          stack: 'component',\n          silent: true,\n          xAxisIndex: 1,\n          yAxisIndex: 1,\n          itemStyle: {\n            color: this.theme.darkTheme() ? '#353232ee' : '#eeee',\n          },\n          data: reverseExpensValue,\n        },\n        {\n          type: 'pie',\n          radius: [0, '30%'],\n          center: ['75%', '25%'],\n          data: this.incomeOperationsToCategory(),\n        },\n        {\n          type: 'pie',\n          radius: [0, '30%'],\n          center: ['75%', '75%'],\n          data: this.expensOperationsToCategory(),\n        },\n      ],\n    };\n  });\n\n  private incomeOperationsToMonth = computed((): { name: string; value: number }[] =>\n    this.formatToMonth(this.localStorage.getAllOperationsByType('income'))\n  )\n\n  private expensOperationsToMonth = computed((): { name: string; value: number }[] =>\n    this.formatToMonth(this.localStorage.getAllOperationsByType('expens'))\n  )\n\n  private incomeOperationsToCategory = computed((): { name: string; value: number }[] => \n    this.formattToCategory(this.localStorage.getAllOperationsByType('income'))\n  )\n\n  private expensOperationsToCategory = computed((): { name: string; value: number }[] => \n    this.formattToCategory(this.localStorage.getAllOperationsByType('expens'))\n  )\n\n  private formatToMonth(data: IOperation[]): { name: string; value: number }[] {\n\n    const allOperations = data.sort((a, b) => a.date.getTime() - b.date.getTime());\n    const resultMap = new Map();\n    let currentDate = new Date(this.filterService.startYearInteval());\n    let endDate = new Date(this.filterService.endYearInteval());\n    do {\n      const key = this.formatDate(currentDate);\n      resultMap.set(key, { name: key, value: 0 });\n      currentDate.setMonth(currentDate.getMonth() + 1);\n    } while (currentDate <= endDate);\n\n    for (const operation of allOperations) {\n      const key = this.formatDate(operation.date);\n      const mapElemet = resultMap.get(key);\n      resultMap.set(key, {\n        name: key,\n        value: mapElemet.value + operation.value,\n      });\n    }\n\n    const res = Array.from(resultMap.values());\n    return res;\n  }\n\n  private formattToCategory(data: IOperation[]): { name: string; value: number }[] {\n\n    const resultMap = new Map();\n    data.forEach((item) => {\n      const category = item.category;\n      if (!resultMap.has(category)) {\n        resultMap.set(category, { name: category, value: 0 });\n      }\n      const currentValue = resultMap.get(category).value;\n      resultMap.set(category, { name: category, value: currentValue + item.value });\n    });\n    const res = Array.from(resultMap.values());\n    return res;\n  }\n\n  private formatDate(date: Date): string | null {\n    const MONTHS = [ 'Январь',  'Февраль',  'Март',  'Апрель',  'Май',  'Июнь',  'Июль',  'Август',  'Сентябрь',  'Октябрь',  'Ноябрь',  'Декабрь'];\n    return MONTHS[date.getMonth()];\n  }\n\n}", "<my-chart name=\"mega\" [option]=\"option()\" >", "import { Component, signal } from '@angular/core';\nimport { MegaChart } from '../../components/Components_Chart/Mega/megaChart.component';\n\n@Component({\n  selector: 'my-app-main-page',\n  imports: [ MegaChart ],\n  standalone: true,\n  providers: [],\n  templateUrl: './chartPage.html',\n})\nexport class ChartsPage {\n  protected readonly title = signal('fms-angular-app');\n\n  constructor() {}\n\n}\n", "<div style=\"height: 800px;\">\n  <my-mega-chart />\n</div>"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AAWM,IAAO,YAAP,MAAO,WAAS;EAED;EAAmC;EAA8B;EAApF,YAAmB,cAAmC,eAA8B,OAAY;AAA7E,SAAA,eAAA;AAAmC,SAAA,gBAAA;AAA8B,SAAA,QAAA;EAEpF;EAEO,SAAS,SAAS,MAAK;AAC5B,UAAM,eAAe,CAAC,GAAG,KAAK,wBAAuB,CAAE,EAAE,KAAK,CAAC,GAAG,MAAM,EAAE,QAAQ,EAAE,KAAK;AACzF,UAAM,eAAe,CAAC,GAAG,KAAK,wBAAuB,CAAE,EAAE,KAAK,CAAC,GAAG,MAAM,EAAE,QAAQ,EAAE,KAAK;AAEzF,UAAM,eAAe,aAAa,IAAI,OAAK,EAAE,KAAK;AAClD,UAAM,eAAe,aAAa,IAAI,OAAK,EAAE,KAAK;AAElD,UAAM,WAAW,KAAK,IAAI,GAAG,cAAc,GAAG,YAAY;AAE1D,UAAM,aAAa,aAAa,OAAO,CAAC,KAAK,MAAM,MAAM,GAAG,CAAC;AAC7D,UAAM,aAAa,aAAa,OAAO,CAAC,KAAK,MAAM,MAAM,GAAG,CAAC;AAE7D,UAAM,kBAAkB,aAAa,IAAI,OAAK,EAAE,IAAI;AACpD,UAAM,kBAAkB,aAAa,IAAI,OAAK,EAAE,IAAI;AACpD,UAAM,qBAAqB,aAAa,IAAI,OAAK,WAAW,CAAC;AAC7D,UAAM,qBAAqB,aAAa,IAAI,OAAK,WAAW,CAAC;AAE7D,UAAM,yBAAyB,KAAK,2BAA0B,EAAG,CAAC,GAAG,QAAQ;AAC7E,UAAM,yBAAyB,KAAK,2BAA0B,EAAG,CAAC,GAAG,QAAQ;AAE7E,WAAO;MACL,iBAAiB;MACjB,SAAS,CAAA;MACT,OAAO;QACL;UACE,MAAM;UACN,SAAS,uDAAe;UACxB,MAAM;UACN,WAAW;;QAEb;UACE,MAAM;UACN,SAAS,qHAA2B;UACpC,MAAM;UACN,WAAW;;QAEb;UACE,MAAM;UACN,SAAS,uDAAe;UACxB,MAAM;UACN,KAAK;UACL,WAAW;;QAEb;UACE,MAAM;UACN,SAAS,mGAAwB;UACjC,MAAM;UACN,KAAK;UACL,WAAW;;;MAGf,MAAM;QACJ;UACE,KAAK;UACL,OAAO;UACP,QAAQ;UACR,MAAM;UACN,cAAc;;QAEhB;UACE,KAAK;UACL,OAAO;UACP,QAAQ;UACR,MAAM;UACN,cAAc;;;MAGlB,OAAO;QACL;UACE,MAAM;UACN,KAAK;UACL,WAAW;YACT,MAAM;;;QAGV;UACE,MAAM;UACN,KAAK;UACL,WAAW;UACX,WAAW;YACT,MAAM;;;;MAIZ,OAAO;QACL;UACE,MAAM;UACN,MAAM;UACN,WAAW;YACT,UAAU;YACV,QAAQ;;UAEV,WAAW;YACT,MAAM;;;QAGV;UACE,WAAW;UACX,MAAM;UACN,MAAM;UACN,WAAW;YACT,UAAU;YACV,QAAQ;;UAEV,WAAW;YACT,MAAM;;;;MAIZ,QAAQ;QACN;UACE,MAAM;UACN,OAAO;UACP,GAAG;UACH,OAAO;YACL,UAAU;YACV,MAAM;;UAER,MAAM;;QAER;UACE,MAAM;UACN,OAAO;UACP,QAAQ;UACR,WAAW;YACT,OAAO,KAAK,MAAM,UAAS,IAAK,cAAc;;UAEhD,MAAM;;QAER;UACE,MAAM;UACN,OAAO;UACP,YAAY;UACZ,YAAY;UACZ,GAAG;UACH,OAAO;YACL,UAAU;YACV,MAAM;;UAER,MAAM;;QAER;UACE,MAAM;UACN,OAAO;UACP,QAAQ;UACR,YAAY;UACZ,YAAY;UACZ,WAAW;YACT,OAAO,KAAK,MAAM,UAAS,IAAK,cAAc;;UAEhD,MAAM;;QAER;UACE,MAAM;UACN,QAAQ,CAAC,GAAG,KAAK;UACjB,QAAQ,CAAC,OAAO,KAAK;UACrB,MAAM,KAAK,2BAA0B;;QAEvC;UACE,MAAM;UACN,QAAQ,CAAC,GAAG,KAAK;UACjB,QAAQ,CAAC,OAAO,KAAK;UACrB,MAAM,KAAK,2BAA0B;;;;EAI7C,GAAC,GAAA,YAAA,CAAA,EAAA,WAAA,SAAA,CAAA,IAAA,CAAA,CAAA;EAEO,0BAA0B,SAAS,MACzC,KAAK,cAAc,KAAK,aAAa,uBAAuB,QAAQ,CAAC,GAAC,GAAA,YAAA,CAAA,EAAA,WAAA,0BAAA,CAAA,IAAA,CAAA,CAAA;EAGhE,0BAA0B,SAAS,MACzC,KAAK,cAAc,KAAK,aAAa,uBAAuB,QAAQ,CAAC,GAAC,GAAA,YAAA,CAAA,EAAA,WAAA,0BAAA,CAAA,IAAA,CAAA,CAAA;EAGhE,6BAA6B,SAAS,MAC5C,KAAK,kBAAkB,KAAK,aAAa,uBAAuB,QAAQ,CAAC,GAAC,GAAA,YAAA,CAAA,EAAA,WAAA,6BAAA,CAAA,IAAA,CAAA,CAAA;EAGpE,6BAA6B,SAAS,MAC5C,KAAK,kBAAkB,KAAK,aAAa,uBAAuB,QAAQ,CAAC,GAAC,GAAA,YAAA,CAAA,EAAA,WAAA,6BAAA,CAAA,IAAA,CAAA,CAAA;EAGpE,cAAc,MAAkB;AAEtC,UAAM,gBAAgB,KAAK,KAAK,CAAC,GAAG,MAAM,EAAE,KAAK,QAAO,IAAK,EAAE,KAAK,QAAO,CAAE;AAC7E,UAAM,YAAY,oBAAI,IAAG;AACzB,QAAI,cAAc,IAAI,KAAK,KAAK,cAAc,iBAAgB,CAAE;AAChE,QAAI,UAAU,IAAI,KAAK,KAAK,cAAc,eAAc,CAAE;AAC1D,OAAG;AACD,YAAM,MAAM,KAAK,WAAW,WAAW;AACvC,gBAAU,IAAI,KAAK,EAAE,MAAM,KAAK,OAAO,EAAC,CAAE;AAC1C,kBAAY,SAAS,YAAY,SAAQ,IAAK,CAAC;IACjD,SAAS,eAAe;AAExB,eAAW,aAAa,eAAe;AACrC,YAAM,MAAM,KAAK,WAAW,UAAU,IAAI;AAC1C,YAAM,YAAY,UAAU,IAAI,GAAG;AACnC,gBAAU,IAAI,KAAK;QACjB,MAAM;QACN,OAAO,UAAU,QAAQ,UAAU;OACpC;IACH;AAEA,UAAM,MAAM,MAAM,KAAK,UAAU,OAAM,CAAE;AACzC,WAAO;EACT;EAEQ,kBAAkB,MAAkB;AAE1C,UAAM,YAAY,oBAAI,IAAG;AACzB,SAAK,QAAQ,CAAC,SAAQ;AACpB,YAAM,WAAW,KAAK;AACtB,UAAI,CAAC,UAAU,IAAI,QAAQ,GAAG;AAC5B,kBAAU,IAAI,UAAU,EAAE,MAAM,UAAU,OAAO,EAAC,CAAE;MACtD;AACA,YAAM,eAAe,UAAU,IAAI,QAAQ,EAAE;AAC7C,gBAAU,IAAI,UAAU,EAAE,MAAM,UAAU,OAAO,eAAe,KAAK,MAAK,CAAE;IAC9E,CAAC;AACD,UAAM,MAAM,MAAM,KAAK,UAAU,OAAM,CAAE;AACzC,WAAO;EACT;EAEQ,WAAW,MAAU;AAC3B,UAAM,SAAS,CAAE,wCAAW,8CAAY,4BAAS,wCAAW,sBAAQ,4BAAS,4BAAS,wCAAW,oDAAa,8CAAY,wCAAW,4CAAS;AAC9I,WAAO,OAAO,KAAK,SAAQ,CAAE;EAC/B;;qCAzOW,YAAS,4BAAA,YAAA,GAAA,4BAAA,MAAA,GAAA,4BAAA,KAAA,CAAA;EAAA;yEAAT,YAAS,WAAA,CAAA,CAAA,eAAA,CAAA,GAAA,OAAA,GAAA,MAAA,GAAA,QAAA,CAAA,CAAA,QAAA,QAAA,GAAA,QAAA,CAAA,GAAA,UAAA,SAAA,mBAAA,IAAA,KAAA;AAAA,QAAA,KAAA,GAAA;ACXtB,MAAA,oBAAA,GAAA,YAAA,CAAA;;;AAAsB,MAAA,qBAAA,UAAA,IAAA,OAAA,CAAA;;oBDSV,KAAK,GAAA,eAAA,EAAA,CAAA;;;sEAEJ,WAAS,CAAA;UALrB;uBACW,iBAAe,SAEhB,CAAC,KAAK,GAAC,UAAA,8CAAA,CAAA;;;;6EAEL,WAAS,EAAA,WAAA,aAAA,UAAA,mEAAA,YAAA,GAAA,CAAA;AAAA,GAAA;;;AEDhB,IAAO,aAAP,MAAO,YAAU;EACF,QAAQ,OAAO,mBAAiB,GAAA,YAAA,CAAA,EAAA,WAAA,QAAA,CAAA,IAAA,CAAA,CAAA;EAEnD,cAAA;EAAe;;qCAHJ,aAAU;EAAA;yEAAV,aAAU,WAAA,CAAA,CAAA,kBAAA,CAAA,GAAA,UAAA,CAAA,6BAHV,CAAA,CAAE,CAAA,GAAA,OAAA,GAAA,MAAA,GAAA,QAAA,CAAA,CAAA,GAAA,UAAA,OAAA,CAAA,GAAA,UAAA,SAAA,oBAAA,IAAA,KAAA;AAAA,QAAA,KAAA,GAAA;ACPf,MAAA,yBAAA,GAAA,OAAA,CAAA;AACE,MAAA,oBAAA,GAAA,eAAA;AACF,MAAA,uBAAA;;oBDGa,SAAS,GAAA,eAAA,EAAA,CAAA;;;sEAKT,YAAU,CAAA;UAPtB;uBACW,oBAAkB,SACnB,CAAE,SAAS,GAAE,YACV,MAAI,WACL,CAAA,GAAE,UAAA,4DAAA,CAAA;;;;6EAGF,YAAU,EAAA,WAAA,cAAA,UAAA,kDAAA,YAAA,GAAA,CAAA;AAAA,GAAA;",
  "names": []
}
