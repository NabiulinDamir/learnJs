{
  "version": 3,
  "sources": ["src/assets/testData.json", "src/app/servises/indexDB.service.ts", "src/app/servises/filter.service.ts", "src/app/servises/LocalStorage.service.ts", "src/app/components/Components_Chart/charts/chart/dataFormatter.service.ts", "src/app/components/Components_Chart/charts/chart/chartOptions.service.ts"],
  "sourcesContent": ["{\n  \"categories\": [\n    {\"name\": \"\u0417\u0430\u0440\u043F\u043B\u0430\u0442\u0430\", \"type\": \"income\" },\n    {\"name\": \"\u041F\u043E\u0434\u0440\u0430\u0431\u043E\u0442\u043A\u0430\", \"type\": \"income\" },\n    {\"name\": \"\u0424\u0440\u0438\u043B\u0430\u043D\u0441\", \"type\": \"income\" },\n    {\"name\": \"\u0415\u0434\u0430\", \"type\": \"expense\" },\n    {\"name\": \"\u0422\u0440\u0430\u043D\u0441\u043F\u043E\u0440\u0442\", \"type\": \"expense\" },\n    {\"name\": \"\u0416\u0438\u043B\u044C\u0435\", \"type\": \"expense\" },\n    {\"name\": \"\u0420\u0430\u0437\u0432\u043B\u0435\u0447\u0435\u043D\u0438\u044F\", \"type\": \"expense\" },\n    {\"name\": \"\u0417\u0434\u043E\u0440\u043E\u0432\u044C\u0435\", \"type\": \"expense\" },\n    {\"name\": \"\u041E\u0434\u0435\u0436\u0434\u0430\", \"type\": \"expense\" },\n    { \"name\": \"\u041E\u0431\u0440\u0430\u0437\u043E\u0432\u0430\u043D\u0438\u0435\", \"type\": \"expense\" }\n  ],\n  \"operations\": [\n    { \"type\": \"income\", \"value\": 45000, \"date\": \"2025-10-05T10:00:00\", \"category\": \"\u0417\u0430\u0440\u043F\u043B\u0430\u0442\u0430\" },\n    { \"type\": \"income\", \"value\": 8000,  \"date\": \"2025-10-03T08:20:00\", \"category\": \"\u041F\u043E\u0434\u0440\u0430\u0431\u043E\u0442\u043A\u0430\" },\n    { \"type\": \"income\", \"value\": 5000,  \"date\": \"2025-10-09T16:45:00\", \"category\": \"\u0424\u0440\u0438\u043B\u0430\u043D\u0441\" },\n    { \"type\": \"expens\", \"value\": 3500,  \"date\": \"2025-10-09T09:15:00\", \"category\": \"\u0415\u0434\u0430\" },\n    { \"type\": \"expens\", \"value\": 2500,  \"date\": \"2025-10-03T08:20:00\", \"category\": \"\u0422\u0440\u0430\u043D\u0441\u043F\u043E\u0440\u0442\" },\n    { \"type\": \"expens\", \"value\": 15000, \"date\": \"2025-10-10T08:00:00\", \"category\": \"\u0416\u0438\u043B\u044C\u0435\" },\n    { \"type\": \"expens\", \"value\": 2000,  \"date\": \"2025-10-05T10:30:00\", \"category\": \"\u0415\u0434\u0430\" },\n    { \"type\": \"expens\", \"value\": 3000,  \"date\": \"2025-10-05T20:00:00\", \"category\": \"\u0420\u0430\u0437\u0432\u043B\u0435\u0447\u0435\u043D\u0438\u044F\" },\n    { \"type\": \"expens\", \"value\": 800,   \"date\": \"2025-10-05T20:45:00\", \"category\": \"\u0417\u0434\u043E\u0440\u043E\u0432\u044C\u0435\" },\n    { \"type\": \"expens\", \"value\": 1800,  \"date\": \"2025-10-25T19:15:00\", \"category\": \"\u0415\u0434\u0430\" },\n    { \"type\": \"income\", \"value\": 42000, \"date\": \"2025-09-15T10:00:00\", \"category\": \"\u0417\u0430\u0440\u043F\u043B\u0430\u0442\u0430\" },\n    { \"type\": \"income\", \"value\": 6000,  \"date\": \"2025-09-15T14:30:00\", \"category\": \"\u041F\u043E\u0434\u0440\u0430\u0431\u043E\u0442\u043A\u0430\" },\n    { \"type\": \"expens\", \"value\": 14000, \"date\": \"2025-09-15T08:00:00\", \"category\": \"\u0416\u0438\u043B\u044C\u0435\" },\n    { \"type\": \"expens\", \"value\": 4500,  \"date\": \"2025-09-15T20:30:00\", \"category\": \"\u0415\u0434\u0430\" },\n    { \"type\": \"expens\", \"value\": 3500,  \"date\": \"2025-09-15T20:45:00\", \"category\": \"\u0422\u0440\u0430\u043D\u0441\u043F\u043E\u0440\u0442\" },\n    { \"type\": \"expens\", \"value\": 2500,  \"date\": \"2025-09-15T21:00:00\", \"category\": \"\u0420\u0430\u0437\u0432\u043B\u0435\u0447\u0435\u043D\u0438\u044F\" },\n    { \"type\": \"income\", \"value\": 40000, \"date\": \"2025-07-05T10:00:00\", \"category\": \"\u0417\u0430\u0440\u043F\u043B\u0430\u0442\u0430\" },\n    { \"type\": \"income\", \"value\": 7000,  \"date\": \"2025-07-20T16:30:00\", \"category\": \"\u0424\u0440\u0438\u043B\u0430\u043D\u0441\" },\n    { \"type\": \"expens\", \"value\": 13500, \"date\": \"2025-07-05T08:00:00\", \"category\": \"\u0416\u0438\u043B\u044C\u0435\" },\n    { \"type\": \"expens\", \"value\": 3800,  \"date\": \"2025-07-05T10:15:00\", \"category\": \"\u0415\u0434\u0430\" },\n    { \"type\": \"expens\", \"value\": 4200,  \"date\": \"2025-07-05T10:20:00\", \"category\": \"\u0422\u0440\u0430\u043D\u0441\u043F\u043E\u0440\u0442\" },\n    { \"type\": \"expens\", \"value\": 1800,  \"date\": \"2025-07-14T10:30:00\", \"category\": \"\u0417\u0434\u043E\u0440\u043E\u0432\u044C\u0435\" },\n    { \"type\": \"expens\", \"value\": 800,   \"date\": \"2025-08-15T18:45:00\", \"category\": \"\u0415\u0434\u0430\" },\n    { \"type\": \"expens\", \"value\": 1500,  \"date\": \"2025-06-14T20:15:00\", \"category\": \"\u0420\u0430\u0437\u0432\u043B\u0435\u0447\u0435\u043D\u0438\u044F\" },\n    { \"type\": \"income\", \"value\": 3000,  \"date\": \"2025-08-25T08:00:00\", \"category\": \"\u041F\u043E\u0434\u0440\u0430\u0431\u043E\u0442\u043A\u0430\" },\n    { \"type\": \"expens\", \"value\": 2200,  \"date\": \"2025-09-10T14:20:00\", \"category\": \"\u0422\u0440\u0430\u043D\u0441\u043F\u043E\u0440\u0442\" },\n    { \"type\": \"expens\", \"value\": 3200,  \"date\": \"2025-09-10T19:30:00\", \"category\": \"\u041E\u0434\u0435\u0436\u0434\u0430\" },\n    { \"type\": \"expens\", \"value\": 5600,  \"date\": \"2025-08-28T06:00:00\", \"category\": \"\u041E\u0431\u0440\u0430\u0437\u043E\u0432\u0430\u043D\u0438\u0435\" },\n    { \"type\": \"income\", \"value\": 9000,  \"date\": \"2025-06-14T15:45:00\", \"category\": \"\u0424\u0440\u0438\u043B\u0430\u043D\u0441\" },\n    { \"type\": \"expens\", \"value\": 2700,  \"date\": \"2025-10-10T16:10:00\", \"category\": \"\u0415\u0434\u0430\" },\n    { \"type\": \"expens\", \"value\": 5600,  \"date\": \"2025-10-11T16:10:00\", \"category\": \"\u041E\u0431\u0440\u0430\u0437\u043E\u0432\u0430\u043D\u0438\u0435\" },\n    { \"type\": \"income\", \"value\": 9000,  \"date\": \"2025-10-11T15:45:00\", \"category\": \"\u0424\u0440\u0438\u043B\u0430\u043D\u0441\" },\n    { \"type\": \"expens\", \"value\": 2700,  \"date\": \"2025-10-11T16:10:00\", \"category\": \"\u0415\u0434\u0430\" },\n    { \"type\": \"expens\", \"value\": 5600,  \"date\": \"2025-10-12T06:00:00\", \"category\": \"\u041E\u0431\u0440\u0430\u0437\u043E\u0432\u0430\u043D\u0438\u0435\" },\n    { \"type\": \"income\", \"value\": 9000,  \"date\": \"2025-10-12T15:45:00\", \"category\": \"\u0424\u0440\u0438\u043B\u0430\u043D\u0441\" },\n    { \"type\": \"expens\", \"value\": 2700,  \"date\": \"2025-10-12T16:10:00\", \"category\": \"\u0415\u0434\u0430\" },\n    { \"type\": \"income\", \"value\": 3000,  \"date\": \"2025-08-10T08:00:00\", \"category\": \"\u041F\u043E\u0434\u0440\u0430\u0431\u043E\u0442\u043A\u0430\" },\n    { \"type\": \"expens\", \"value\": 2200,  \"date\": \"2025-08-10T14:20:00\", \"category\": \"\u0422\u0440\u0430\u043D\u0441\u043F\u043E\u0440\u0442\" },\n    { \"type\": \"expens\", \"value\": 3200,  \"date\": \"2025-08-10T19:30:00\", \"category\": \"\u041E\u0434\u0435\u0436\u0434\u0430\" },\n    { \"type\": \"expens\", \"value\": 5600,  \"date\": \"2025-08-28T06:00:00\", \"category\": \"\u041E\u0431\u0440\u0430\u0437\u043E\u0432\u0430\u043D\u0438\u0435\" },\n    { \"type\": \"income\", \"value\": 9000,  \"date\": \"2025-08-28T15:45:00\", \"category\": \"\u0424\u0440\u0438\u043B\u0430\u043D\u0441\" },\n    { \"type\": \"expens\", \"value\": 2700,  \"date\": \"2025-08-28T16:10:00\", \"category\": \"\u0415\u0434\u0430\" }\n  ]\n}\n\n", "import { Injectable } from '@angular/core';\nimport { IOperation, ICategory } from '../models/dataTypes.model';\nimport testData from '../../assets/testData.json';\n\n@Injectable({ providedIn: 'root' })\nexport default class localDB {\n  private _timeDelay = 200;\n  private open(): Promise<IDBDatabase> {\n    return new Promise((resolve, reject) => {\n      const openRequest = indexedDB.open('localDB', 3);\n\n      openRequest.onupgradeneeded = (event: IDBVersionChangeEvent) => {\n        const target = event.target as IDBOpenDBRequest;\n        const db: IDBDatabase = target.result;\n\n        if (!db.objectStoreNames.contains('operations')) {\n          db.createObjectStore('operations', { keyPath: 'id', autoIncrement: true });\n        }\n        if (!db.objectStoreNames.contains('categories')) {\n          db.createObjectStore('categories', { keyPath: 'name' });\n        }\n      };\n\n      openRequest.onsuccess = () => {\n        const db = openRequest.result;\n        resolve(db);\n      };\n\n      openRequest.onerror = () => {\n        reject(openRequest.error);\n      };\n    });\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////Основные\n\n  //Вернуть всё\n  //name = \"operations\" || \"categories\"\n  private async getAll<T>(storeKey: string): Promise<T[]> {\n    const db = await this.open();\n    const transaction = db.transaction(storeKey, 'readonly');\n    const store = transaction.objectStore(storeKey);\n\n    return new Promise((resolve, reject) => {\n      const request = store.getAll();\n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  //Вернуть по id\n  //storeKey = \"operations\" || \"categories\"\n  private async getByKey<T>(storeKey: string, itemKey: number | string): Promise<T> {\n    const db = await this.open();\n    const transaction = db.transaction(storeKey, 'readonly');\n    const store = transaction.objectStore(storeKey);\n\n    return new Promise((resolve, reject) => {\n      const request = store.get(itemKey);\n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  //Добавление\n  //storeKey = \"operations\" || \"categories\"\n  private async add(\n    storeKey: string,\n    object: IOperation | ICategory | { type: string; value: number; category: string; date: Date }\n  ) {\n    const db = await this.open();\n    const transaction = db.transaction(storeKey, 'readwrite');\n    const store = transaction.objectStore(storeKey);\n    return new Promise((resolve, reject) => {\n      const request = store.add(object);\n      request.onsuccess = () => {\n        resolve(request.result);\n      };\n      request.onerror = () => {\n        reject(request.error);\n      };\n    });\n  }\n\n  //Редактировать/заменить/добавить по ключу\n  private async setByObject(storeKey: string, newObj: IOperation | ICategory) {\n    const db = await this.open();\n    const transaction = db.transaction(storeKey, 'readwrite');\n    const store = transaction.objectStore(storeKey);\n    return new Promise((resolve, reject) => {\n      const request = store.put(newObj);\n\n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  //Удалить по Id\n  //name = \"operations\" || \"categories\"\n  private async deleteByKey(storeKey: string, itemKey: number | string) {\n    const db = await this.open();\n    const transaction = db.transaction(storeKey, 'readwrite');\n    const store = transaction.objectStore(storeKey);\n\n    return new Promise((resolve, reject) => {\n      const request = store.delete(itemKey);\n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  //отчистить поле по ключу\n  private async clearStore(storeKey: string) {\n    const db = await this.open();\n    const transaction = db.transaction(storeKey, 'readwrite');\n    const store = transaction.objectStore(storeKey);\n    return new Promise((resolve, reject) => {\n      const request = store.clear();\n      request.onsuccess = () => resolve(request.result);\n      request.onerror = () => reject(request.error);\n    });\n  }\n\n  private async keyOf(storeKey: string, itemKey: number | string): Promise<boolean> {\n    const db = await this.open();\n    const transaction = db.transaction(storeKey, 'readonly');\n    const store = transaction.objectStore(storeKey);\n    return new Promise((resolve) => {\n      const request = store.getKey(itemKey);\n      request.onsuccess = () => resolve(request.result !== undefined);\n      request.onerror = () => resolve(false);\n    });\n  }\n\n  //////////////////////////////////////////////////////////////////////////////////////////////////////Операции\n\n  public async getAllOperations(): Promise<IOperation[]> {\n    console.log('--Вернуть все опрерации');\n    await new Promise((resolve) => setTimeout(resolve, this._timeDelay));\n    let result: IOperation[] = [];\n    try {\n      result = await this.getAll<IOperation>('operations');\n    } catch (error) {\n      console.error('Ошибка в возвращении операций: ', error);\n    }\n    return result;\n  }\n\n  public async createOperation(newObj: { type: string; value: number; category: string; date: Date; }) {\n    console.log('--Создание операции');\n    await new Promise((resolve) => setTimeout(resolve, this._timeDelay));\n    let result: any;\n    try {\n      if (!(await this.keyOf('categories', newObj.category))) {\n        await this.createCategory({ name: newObj.category, type: newObj.type });\n      }\n      result = await this.add('operations', newObj);\n    } catch (error) {\n      console.error('Ошибка в создании операции: ', error);\n    }\n    return result;\n  }\n\n  public async deleteOperationByKey(itemKey: number) {\n    console.log('--Удалеие операции');\n    await new Promise((resolve) => setTimeout(resolve, this._timeDelay));\n    let result: any;\n    try {\n      result = await this.deleteByKey('operations', itemKey);\n    } catch (error) {\n      console.error('Ошибка в удалении операции: ', error);\n    }\n    return result;\n  }\n\n  public async updateOperation(newObj: IOperation) {\n    console.log('--Обновление опрерации');\n    await new Promise((resolve) => setTimeout(resolve, this._timeDelay));\n    let result: any;\n    try {\n      if (!(await this.keyOf('categories', newObj.category))) {\n        await this.createCategory({ name: newObj.category, type: newObj.type });\n      }\n      result = await this.setByObject('operations', newObj);\n    } catch (error) {\n      console.error('Ошибка в обновлении оперпции: ', error);\n    }\n    return result;\n  }\n\n  //////////////////////////////////////////////////////////////////////////////////////////////////////Категории\n\n  public async getAllCategories() {\n    console.log('--Возврщение категорий');\n    await new Promise((resolve) => setTimeout(resolve, this._timeDelay));\n    let result: ICategory[] = [];\n    try {\n      result = await this.getAll<ICategory>('categories');\n    } catch (error) {\n      console.error('Ошибка в возвращении категорий: ', error);\n    }\n    return result;\n  }\n\n  public async createCategory(newObj: ICategory) {\n    console.log('--Создание категории');\n    await new Promise((resolve) => setTimeout(resolve, this._timeDelay));\n    let result: any;\n    try {\n      result = await this.add('categories', newObj);\n    } catch (error) {\n      console.error('Ошибка в создании категории: ', error);\n    }\n    return result;\n  }\n\n  public async deleteCategoryByKey(itemKey: string) {\n    console.log('--Удаление категорий');\n    await new Promise((resolve) => setTimeout(resolve, this._timeDelay));\n    let result: any;\n    try {\n      result = await this.deleteByKey('categories', itemKey);\n    } catch (error) {\n      console.error('Ошибка в удалении категории: ', error);\n    }\n    return result;\n  }\n\n  public async updateCategoryByKey(newObj: ICategory) {\n    console.log('--Обновление категории');\n    await new Promise((resolve) => setTimeout(resolve, this._timeDelay));\n    let result: any;\n    try {\n      result = await this.setByObject('categories', newObj);\n    } catch (error) {\n      console.error('Ошибка в обновлении категории: ', error);\n    }\n    return result;\n  }\n\n  ////////////////////////////////////////////////////////////////////////////////////////////////////////Установка дефолтных значений\n\n  public async setDefaultData(): Promise<void> {\n    await this.clearStore('operations');\n    await this.clearStore('categories');\n    for (const element of testData.operations) {\n      const newObj = {\n        type: element.type,\n        value: element.value,\n        date: new Date(element.date),\n        category: element.category,\n      };\n\n      if (!(await this.keyOf('categories', newObj.category))) {\n        await this.add('categories', { name: newObj.category, type: newObj.type });\n      }\n      await this.add('operations', newObj);\n    }\n    return;\n  }\n}\n", "import { Injectable, signal, computed } from '@angular/core';\nimport { IOperation } from '../models/dataTypes.model';\n\n@Injectable({ providedIn: 'root' })\nexport class Filter {\n  public interval = signal<string>('month');\n  public date = signal<Date>(new Date());\n\n  constructor() {}\n\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////Геттеры\n\n  public intervalLocale = computed((): string => {\n    switch (this.interval()) {\n      case 'day':\n        return 'день';\n      case 'month':\n        return 'месяц';\n      case 'year':\n        return 'год';\n      default:\n        return 'пасхалка';\n    }\n  })\n\n  public startInterval = computed((): Date => {\n    const interval = this.interval();\n    const result = new Date(this.date());\n    if (!this.date()) { return new Date(); }\n    result.setHours(0, 0, 0);\n    if (interval === 'month') { result.setDate(1); }\n    if (interval === 'year') { result.setDate(1); result.setMonth(0); }\n    return result;\n  })\n\n  public endInterval = computed((): Date => {\n    const interval = this.interval();\n    const result = new Date(this.date());\n    if (!this.date()) { return new Date() }\n    result.setHours(23, 59, 59);\n    if (interval === 'month') { result.setMonth(result.getMonth() + 1, 0); }\n    if (interval === 'year') { result.setMonth(11, 31); }\n    return result;\n  })\n\n  public startYearInteval = computed((): Date => {\n    const result = new Date(this.date());\n    result.setHours(0, 0, 0);\n    result.setDate(1);\n    result.setMonth(0);\n    return result;\n  })\n\n  public endYearInteval = computed((): Date => {\n    const result = new Date(this.date());\n    result.setHours(23, 59, 59);\n    result.setMonth(11, 31);\n    return result;\n  })\n\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////Сеттеры\n\n  public setDate(newValue: Date): void {\n    // console.log(\"Установить дату: \" + newValue)\n    this.date.set(newValue);\n  }\n\n  public setIntervalDay(): void {\n    // console.log(\"Установить интервал дня\")\n    this.interval.set('day');\n  }\n\n  public setIntervalMonth(): void {\n    // console.log(\"Установить интервал месяца\")\n    this.interval.set('month');\n  }\n\n  public setIntervalYear(): void {\n    // console.log(\"Установить интервал года\")\n    this.interval.set('year');\n  }\n\n  public downInterval(): void {\n    if (this.interval() === 'day') {\n      return;\n    } else if (this.interval() === 'month') {\n      this.setIntervalDay();\n    } else if (this.interval() === 'year') {\n      this.setIntervalMonth();\n    } else {\n      return;\n    }\n  }\n\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////Фильтрация\n\n  public filter(array: IOperation[]): IOperation[] {\n    const result = structuredClone(array);\n    const startInterval = this.startInterval();\n\n    const endInterval = this.endInterval();\n    return result.filter((a) => a.date >= startInterval && a.date <= endInterval);\n  }\n}\n", "import { Injectable,inject,  signal, computed, effect } from '@angular/core';\nimport { IOperation, ICategory } from '../models/dataTypes.model';\nimport localDB from './indexDB.service';\nimport { Filter } from './filter.service';\n\n@Injectable({ providedIn: 'root' })\nexport class LocalStorage {\n  private _operations = signal<IOperation[]>([]);\n  private _categories = signal<ICategory[]>([]);\n  public loadOperationsStatus = signal<boolean>(false)\n  public loadCategoriesStatus = signal<boolean>(false)\n  // onOperationsChanged = new EventEmitter<IOperation[]>();\n  // onCategoriesChanged = new EventEmitter<ICategory[]>();\n  private filterService = inject(Filter);\n  constructor(private _localDb: localDB) {}\n\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////Геттеры\n\n  public allOperations = computed((): IOperation[] => {\n    return structuredClone(this._operations());\n  });\n\n  public getFilteredOperations(): IOperation[] {\n    const op = this._operations();\n    return this.filterService.filter(op)\n  }\n\n  public getFilteredOperationsByType(type: string): IOperation[] {\n    return this.getFilteredOperations().filter((obj) => obj.type === type) || [];\n  }\n\n  public getAllOperationsByType(type: string): IOperation[] {\n    const result = structuredClone(this._operations())\n    return result.filter((obj) => obj.type === type) || [];\n  }\n\n  public getCategoriesByType(type: string): ICategory[] {\n    return this._categories().filter((obj) => obj.type === type) || [];\n  }\n\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////Сеттеры\n\n  public async setOperations(): Promise<void> {\n    console.log(\"Данные обновились\")\n    this.loadOperationsStatus.set(true);\n    const newData = await this._localDb.getAllOperations();\n    this._operations.set(newData);\n    this.loadOperationsStatus.set(false);\n    // this.onOperationsChanged.emit(this._operations());\n  }\n\n  public async setCategories(): Promise<void> {\n    this.loadCategoriesStatus.set(true);\n    const newData = await this._localDb.getAllCategories();\n    this._categories.set(newData);\n    this.loadCategoriesStatus.set(false);\n    // this.onCategoriesChanged.emit(this._categories());\n  }\n\n  public async setDaefaultData(): Promise<void> {//!!!странности!!!\n    await this._localDb.setDefaultData();\n    // await this.setOperations();\n    // await this.setCategories();\n    location.reload();\n    console.warn(\"Test data set\")\n    // console.log(this._operations());\n  }\n\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////Создатторы\n\n  public async createOperation(newOperation: { type: string; value: number; category: string; date: Date; }): Promise<void> {\n    await this._localDb.createOperation(newOperation);\n    await this.setOperations();\n    await this.setCategories();\n  }\n\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////Обновлятторы\n\n  public async updateOperation(operation: IOperation): Promise<void> {\n    await this._localDb.updateOperation(operation);\n    await this.setCategories();\n    await this.setOperations();\n  }\n\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////Удалятторы\n\n  public async deleteOperations(operationsArray: IOperation[]): Promise<void> {\n    for (const obj of operationsArray) {\n      await this._localDb.deleteOperationByKey(<number>obj.id);\n    }\n    await this.setOperations();\n  }\n\n  /////////////////////////////////////////////////////////////////////////////////////////////////////////\n\n  // public filter(arr: IOperation[]): IOperation[] {\n  //   console.log(arr)\n  //   return this._filter.filter(arr);\n  // };\n}\n", "import { Injectable, inject, signal, computed, effect } from '@angular/core';\nimport { IOperation } from '../../../../models/dataTypes.model';\nimport { LocalStorage } from '../../../../servises/LocalStorage.service';\nimport { Filter } from '../../../../servises/filter.service';\n\n@Injectable({ providedIn: 'root' })\nexport class DataFormatter {\n  constructor(public filterService: Filter) {}\n\n  megaFormatToMonth(data: IOperation[]): { name: string; value: number }[] {\n    const allOperations = data.sort((a, b) => a.date.getTime() - b.date.getTime());\n    const resultMap = new Map();\n    let currentDate = new Date(this.filterService.startYearInteval());\n    let endDate = new Date(this.filterService.endYearInteval());\n    do {\n      const key = this.formatDate(currentDate);\n      resultMap.set(key, { name: key, value: 0 });\n      currentDate.setMonth(currentDate.getMonth() + 1);\n    } while (currentDate <= endDate);\n\n    for (const operation of allOperations) {\n      const key = this.formatDate(currentDate);\n      const mapElemet = resultMap.get(key);\n      resultMap.set(key, {\n        name: key,\n        value: mapElemet.value + operation.value,\n      });\n    }\n\n    const res = Array.from(resultMap.values());\n    return res;\n  }\n\n  megaFormatToCategory(data: IOperation[]): { name: string; value: number }[] {\n    const resultMap = new Map();\n    data.forEach((item) => {\n      const category = item.category;\n      if (!resultMap.has(category)) {\n        resultMap.set(category, { name: category, value: 0 });\n      }\n      const currentValue = resultMap.get(category).value;\n      resultMap.set(category, { name: category, value: currentValue + item.value });\n    });\n    const res = Array.from(resultMap.values());\n    return res;\n  }\n\n  roundedFormat(data: IOperation[]): { name: string; value: number }[] {\n    const resultMap = new Map();\n    data.forEach((item) => {\n      const category = item.category;\n      if (!resultMap.has(category)) {\n        resultMap.set(category, { name: category, value: 0 });\n      }\n      const currentValue = resultMap.get(category).value;\n      resultMap.set(category, { name: category, value: currentValue + item.value });\n    });\n    const res = Array.from(resultMap.values());\n    return res;\n  }\n\n  public negativeFormat(data: IOperation[]): { name: string; value: number; date: Date }[] {\n    const allOperations = data.sort((a, b) => a.date.getTime() - b.date.getTime());\n\n    const resultMap = new Map();\n\n    let currentDate = new Date(this.filterService.startInterval());\n    let endDate = new Date(this.filterService.endInterval());\n\n    do {\n      const key = this.formatDate(currentDate);\n      resultMap.set(key, { name: key, value: 0, date: currentDate });\n      if (this.filterService.interval() === 'day') {\n        currentDate.setHours(currentDate.getHours() + 1);\n      } else if (this.filterService.interval() === 'month') {\n        currentDate.setDate(currentDate.getDate() + 1);\n      } else if (this.filterService.interval() === 'year') {\n        currentDate.setMonth(currentDate.getMonth() + 1);\n      } else {\n        currentDate.setDate(currentDate.getDate() + 1);\n      }\n    } while (currentDate <= endDate);\n\n    for (const operation of allOperations) {\n      const key = this.formatDate(operation.date);\n      const mapElemet = resultMap.get(key);\n      const incomeValue = operation.type === 'income' ? operation.value : 0;\n      const expensValue = operation.type === 'expens' ? -operation.value : 0;\n      if (!mapElemet) {\n        resultMap.set(key, { name: key, value: incomeValue + expensValue, date: operation.date });\n      } else {\n        resultMap.set(key, {\n          name: key,\n          value: mapElemet.value + incomeValue + expensValue,\n          date: operation.date,\n        });\n      }\n    }\n\n    const res = Array.from(resultMap.values());\n    return res;\n  }\n\n  public datasetFormat(data: IOperation[]): { name: string; income: number; expens: number; date: Date }[] {\n    const filterInterval = this.filterService.interval();\n\n    const resultMap = new Map();\n    let currentDate = new Date(this.filterService.startInterval());\n    let endDate = new Date(this.filterService.endInterval());\n\n    do {\n      const key = this.formatDate(currentDate);\n      resultMap.set(key, { name: key, income: 0, expens: 0 });\n      if (filterInterval === 'day') {\n        currentDate.setHours(currentDate.getHours() + 1);\n      } else if (filterInterval === 'month') {\n        currentDate.setDate(currentDate.getDate() + 1);\n      } else if (filterInterval === 'year') {\n        currentDate.setMonth(currentDate.getMonth() + 1);\n      } else {\n        currentDate.setDate(currentDate.getDate() + 1);\n      }\n    } while (currentDate <= endDate);\n\n    for (const operation of data) {\n      const key = this.formatDate(operation.date);\n      const mapElemet = resultMap.get(key);\n      const incomeValue = operation.type === 'income' ? operation.value : 0;\n      const expensValue = operation.type === 'expens' ? operation.value : 0;\n      if (!mapElemet) {\n        resultMap.set(key, {\n          name: key,\n          income: incomeValue,\n          expens: expensValue,\n          date: operation.date,\n        });\n      } else {\n        resultMap.set(key, {\n          name: key,\n          income: mapElemet.income + incomeValue,\n          expens: mapElemet.expens + expensValue,\n          date: operation.date,\n        });\n      }\n    }\n    return Array.from(resultMap.values());\n  }\n\n  formatDate(date: Date): string | null {\n    switch (this.filterService.interval()) {\n      case 'day':\n        return date.getHours().toString();\n      case 'month':\n        return date.getDate().toString();\n      case 'year':\n        return date.getMonth().toString();\n      default:\n        return 'dd.MM.yyyy';\n    }\n  }\n}\n", "import { Injectable, inject, signal, computed, effect } from '@angular/core';\nimport { IOperation } from '../../../../models/dataTypes.model';\nimport { LocalStorage } from '../../../../servises/LocalStorage.service';\nimport { Filter } from '../../../../servises/filter.service';\nimport { DataFormatter } from './dataFormatter.service';\n\n@Injectable({ providedIn: 'root' })\nexport class ChartOptions {\n  constructor(protected localStorage: LocalStorage, public filterService: Filter, public dataFormatter: DataFormatter) {}\n\n  public MEGA = computed(() => {\n\n    const incomeOperationsFormat = this.dataFormatter.megaFormatToMonth(\n      this.localStorage.getAllOperationsByType('income')\n    );\n    const expensOperationsFormat = this.dataFormatter.megaFormatToMonth(\n      this.localStorage.getAllOperationsByType('expens')\n    );\n\n    const incomeCategoriesFormat = this.dataFormatter.megaFormatToCategory(\n      this.localStorage.getAllOperationsByType('income')\n    );\n    const expensCategoriesFormat = this.dataFormatter.megaFormatToCategory(\n      this.localStorage.getAllOperationsByType('expens')\n    );\n\n    const sortedIncome = [...incomeOperationsFormat].sort((a, b) => a.value - b.value);\n    const sortedExpens = [...expensOperationsFormat].sort((a, b) => a.value - b.value);\n\n    const incomeValues = sortedIncome.map(a => a.value);\n    const expensValues = sortedExpens.map(a => a.value);\n\n    const maxCount = Math.max(...incomeValues, ...expensValues);\n\n    const summIncome = incomeValues.reduce((sum, a) => sum + a, 0);\n    const summExpens = expensValues.reduce((sum, a) => sum + a, 0);\n\n    const incomeMonthsArr = sortedIncome.map(a => a.name);\n    const expensMonthsArr = sortedExpens.map(a => a.name);\n    const reverseIncomeValue = incomeValues.map(a => maxCount - a);\n    const reverseExpensValue = expensValues.map(a => maxCount - a);\n\n    const bestCategoryIncomeName = incomeCategoriesFormat[0]?.name || '...';\n    const bestCategoryExpensName = expensCategoriesFormat[0]?.name || '...';\n\n    const option = {\n      backgroundColor: 'transparent',\n      tooltip: {},\n      title: [\n        {\n          text: 'Доходы',\n          subtext: 'Суммарно: ' + summIncome,\n          left: '25%',\n          textAlign: 'center',\n        },\n        {\n          text: 'Категории доходов',\n          subtext: 'Больше всего доходов: ' + bestCategoryIncomeName,\n          left: '75%',\n          textAlign: 'center',\n        },\n        {\n          text: 'Расходы',\n          subtext: 'Суммарно: ' + summExpens,\n          left: '25%',\n          top: '50%',\n          textAlign: 'center',\n        },\n        {\n          text: 'Категории расходов',\n          subtext: 'Больше всего трат: ' + bestCategoryExpensName,\n          left: '75%',\n          top: '50%',\n          textAlign: 'center',\n        },\n      ],\n      grid: [\n        {\n          top: '8%',\n          width: '50%',\n          bottom: '50%',\n          left: 10,\n          containLabel: true,\n        },\n        {\n          top: '56%',\n          width: '50%',\n          bottom: 0,\n          left: 10,\n          containLabel: true,\n        },\n      ],\n      xAxis: [\n        {\n          type: 'value',\n          max: maxCount,\n          splitLine: {\n            show: false,\n          },\n        },\n        {\n          type: 'value',\n          max: maxCount,\n          gridIndex: 1,\n          splitLine: {\n            show: false,\n          },\n        },\n      ],\n      yAxis: [\n        {\n          type: 'category',\n          data: incomeMonthsArr,\n          axisLabel: {\n            interval: 0,\n            rotate: 30,\n          },\n          splitLine: {\n            show: false,\n          },\n        },\n        {\n          gridIndex: 1,\n          type: 'category',\n          data: expensMonthsArr,\n          axisLabel: {\n            interval: 0,\n            rotate: 30,\n          },\n          splitLine: {\n            show: false,\n          },\n        },\n      ],\n      series: [\n        {\n          type: 'bar',\n          stack: 'chart',\n          z: 3,\n          label: {\n            position: 'right',\n            show: true,\n          },\n          data: incomeValues,\n        },\n        {\n          type: 'bar',\n          stack: 'chart',\n          silent: true,\n          itemStyle: {\n            // color: this.theme.darkTheme() ? '#353232ee' : '#eeee',\n          },\n          data: reverseIncomeValue,\n        },\n        {\n          type: 'bar',\n          stack: 'component',\n          xAxisIndex: 1,\n          yAxisIndex: 1,\n          z: 3,\n          label: {\n            position: 'right',\n            show: true,\n          },\n          data: expensValues,\n        },\n        {\n          type: 'bar',\n          stack: 'component',\n          silent: true,\n          xAxisIndex: 1,\n          yAxisIndex: 1,\n          itemStyle: {\n            // color: this.theme.darkTheme() ? '#353232ee' : '#eeee',\n          },\n          data: reverseExpensValue,\n        },\n        {\n          type: 'pie',\n          radius: [0, '30%'],\n          center: ['75%', '25%'],\n          data: incomeCategoriesFormat,\n        },\n        {\n          type: 'pie',\n          radius: [0, '30%'],\n          center: ['75%', '75%'],\n          data: expensCategoriesFormat,\n        },\n      ],\n    };\n  return option\n  \n})\n\n  public ROUNDED = computed(() => {\n    const formatIncomeData = this.dataFormatter.roundedFormat(this.localStorage.getFilteredOperationsByType('income'));\n    const formatExpensData = this.dataFormatter.roundedFormat(this.localStorage.getFilteredOperationsByType('expens'));\n\n    return {\n      backgroundColor: 'transparent',\n      tooltip: {\n        trigger: 'item',\n      },\n\n      title: [\n        {\n          text: `${'Доходы'}: ${formatIncomeData.reduce((summ, a) => summ += a.value, 0)} руб.`,\n          left: '30%',\n          top: '10%',\n          textAlign: 'center',\n        },\n        {\n          text: `${'Расходы'}: ${formatExpensData.reduce((summ, a) => summ += a.value, 0)} руб.`,\n          left: '70%',\n          top: '10%',\n          textAlign: 'center',\n        },\n      ],\n\n      series: [\n        {\n          name: 'Категория',\n          type: 'pie',\n          radius: ['40%', '70%'],\n          data: formatIncomeData,\n          top: '10%',\n          label: {\n            show: true,\n            position: 'outside',\n          },\n          center: ['30%', '50%'],\n          color: [\n            '#0d6efd', // основной\n            '#0a58ca', // темнее\n            '#3d8bfd', // светлее\n            '#6ea8fe', // еще светлее\n            '#9fcdff', // самый светлый\n            '#084298', // очень темный\n            '#052c65', // максимально темный\n          ],\n        },\n        {\n          name: 'Категория',\n          type: 'pie',\n          radius: ['40%', '70%'],\n          data: formatExpensData,\n          top: '10%',\n          label: {\n            show: true,\n            position: 'outside',\n          },\n          center: ['70%', '50%'],\n          color: ['#0d6efd', '#0a58ca', '#3d8bfd', '#6ea8fe', '#9fcdff', '#084298', '#052c65'],\n        },\n      ],\n    };\n  });\n\n  public NEGATIVE = computed(() => {\n    const intervalLocaleRu = this.filterService.intervalLocale();\n\n    const allOperations = this.localStorage.getFilteredOperations().sort((a, b) => a.date.getTime() - b.date.getTime());\n    const formattedData = this.dataFormatter.negativeFormat(allOperations)\n\n    const option = {\n      backgroundColor: 'transparent',\n      tooltip: {\n        trigger: 'axis',\n        axisPointer: {\n          type: 'shadow',\n        },\n      },\n      title: {\n        text: `Орерации за ${intervalLocaleRu}`,\n        position: 'top',\n      },\n      grid: {\n        top: 80,\n        bottom: 30,\n      },\n      yAxis: {\n        type: 'value',\n        position: 'top',\n        splitLine: {\n          lineStyle: {\n            type: 'dashed',\n          },\n        },\n      },\n      xAxis: {\n        data: formattedData.map((item) => item.name),\n        type: 'category',\n        axisLine: { show: false },\n        axisLabel: {},\n        axisTick: { show: false },\n        splitLine: { show: false },\n      },\n      series: [\n        {\n          markLine: {\n            data: [\n              {\n                yAxis: 0,\n                lineStyle: {\n                  color: '#0d6efd',\n                  width: 2,\n                },\n                label: { show: false },\n              },\n            ],\n          },\n          name: 'Итого',\n          type: 'bar',\n          stack: 'Total',\n          label: {\n            show: true,\n            formatter: '{c}',\n          },\n          itemStyle: {\n            color: (params: any) => {\n              if (params.value > 0) {\n                return '#28a745';\n              } else if (params.value < 0) {\n                return '#dc3545';\n              } else {\n                return '#000000';\n              }\n            },\n          },\n          data: formattedData,\n        },\n      ],\n    };\n\n    return option;\n  });\n\n  public DATASET = computed(() => {\n    const filteredOperations = this.localStorage\n      .getFilteredOperations()\n      .sort((a, b) => a.date.getTime() - b.date.getTime());\n    const intervalLocaleRu = this.filterService.intervalLocale();\n\n    const formattedData = this.dataFormatter.datasetFormat(filteredOperations);\n    \n    const option = {\n      backgroundColor: 'transparent',\n      tooltip: { trigger: 'axis' },\n      legend: {\n        data: ['Доходы', 'Расходы'],\n        itemGap: 5,\n      },\n      title: {\n        text: `Операции за ${intervalLocaleRu}`,\n        position: 'top',\n      },\n      dataset: {\n        source: formattedData,\n      },\n      grid: {\n        top: '12%',\n        left: '1%',\n        right: '10%',\n        containLabel: true,\n      },\n      xAxis: {\n        type: 'category',\n      },\n      yAxis: {\n        type: 'value',\n        name: 'Сумма',\n      },\n      dataZoom: [\n        {\n          show: true,\n          start: 0,\n          end: 100,\n        },\n      ],\n      series: [\n        {\n          name: 'Доходы',\n          type: 'bar',\n          color: '#0d6efd',\n        },\n        {\n          name: 'Расходы',\n          type: 'bar',\n          color: '#6c757d',\n        },\n      ],\n    };\n    return option;\n  });\n\n\n}\n\n\n\n\n\n\n"],
  "mappings": "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",
  "names": []
}
